library(compGEE)
tryCatch({
DD <- dim(beta)[1]
PP <- dim(beta)[2] - 1
series_lengths <- rep(TT, NN)
RNGkind("L'Ecuyer-CMRG")
set.seed(seed)
# generation covariates
x_list <- vector("list", NN)
# all random
for (ii in 1:NN) {
x_list[[ii]] <- cbind(1, matrix(rnorm(PP * series_lengths[ii]), ncol = PP))
}
# generation observations
pi_list <- vector("list", NN)
y_outer <- vector("list", NN)
y_corr <- vector("list", NN)
for (ii in 1:NN) {
pi_loc <- matrix(NA, series_lengths[ii], DD)
y_out <- matrix(NA, series_lengths[ii], DD)
y_cc <- matrix(NA, series_lengths[ii], DD)
xx <- x_list[[ii]]
u_corr <-  rgamma(DD, 3, 3)
rho <- 0.8
for (jj in 1:series_lengths[ii]) {
eta <- beta %*% xx[jj, ]
pi_loc[jj, ] <- mult_logit(eta)
new_err <-  rgamma(DD, 3, 3)
y_out[jj, ] <- pi_loc[jj, ] * new_err
u_corr <- pmax(1 + rho * (u_corr - 1) + sqrt(1-rho^2) * (new_err - 1), 0)
y_cc[jj, ] <- pi_loc[jj, ] * u_corr
}
pi_list[[ii]] <- pi_loc
y_outer[[ii]] <- y_out
y_corr[[ii]] <- y_cc
}
# initialization parameters
beta_0 <- matrix(0, DD, (PP + 1))
rho_0 <- 0
l0 <- 1e-2
starttime <- Sys.time()
fit_outer <- compGeeFit(
y_outer,
x_list,
beta_0,
rho_0,
Phi = NULL,
criterion = "ref",
jack = FALSE,
decay_factor = l0,
max.iter = max.iter,
eps = eps
)
fit_corr <- compGeeFit(
y_corr,
x_list,
beta_0,
rho_0,
Phi = NULL,
criterion = "ref",
jack = FALSE,
decay_factor = l0,
max.iter = max.iter,
eps = eps
)
Sys.time() - starttime
# fit_list <- list(fit_outer, fit_inner, fit_corr)
fit_list <- list(fit_outer, fit_corr, seed)
fit_list
}, error = function(e)
{
print(e)
result <- list(error = e)
result
})
}
m.iter <- 100
ee <- 1e-6
n_seeds <- 21
set.seed(254)
seeds <- sample.int(n_seeds * 10, n_seeds)
seed_list <- vector("list", n_seeds)
for (ii in 1:n_seeds) {
seed_list[[ii]] <- seeds[ii]
}
cl <- makeCluster(min(detectCores() - 1, length(seed_list)))
clusterEvalQ(cl, { library(compGEE)
})  # you need to export packages as well
clusterExport(cl, c("parallel_wrapper", "beta", "NN", "TT", "mult_logit", "m.iter", "ee"))  # you need to export stuff as well
starttime <- Sys.time()
print(starttime)
apply_res <- parLapply(
cl,
seed_list,
parallel_wrapper,
beta = beta,
NN = NN,
TT = TT,
max.iter = m.iter,
eps = ee
)
# mclapply(seed_list, parallel_wrapper, x_list = x_list, z_list = z_long, mc.cores = 15)
Sys.time() - starttime
stopCluster(cl)
## Use the first 20 seeds for boxplots and the last for jackknife
fit_20 <- apply_res[1:20]
fit_21 <- apply_res[[21]]
rm(apply_res)
# jackknife
seed_21 <- fit_21[[3]]
set.seed(seed_21)
# generation covariates
x_list <- vector("list", NN)
# all random
for (ii in 1:NN) {
x_list[[ii]] <- cbind(1, matrix(rnorm(PP * series_lengths[ii]), ncol = PP))
}
# generation observations
pi_list <- vector("list", NN)
y_outer <- vector("list", NN)
y_corr <- vector("list", NN)
for (ii in 1:NN) {
pi_loc <- matrix(NA, series_lengths[ii], DD)
y_out <- matrix(NA, series_lengths[ii], DD)
y_cc <- matrix(NA, series_lengths[ii], DD)
xx <- x_list[[ii]]
u_corr <-  rgamma(DD, 3, 3)
rho <- 0.8
for (jj in 1:series_lengths[ii]) {
eta <- beta %*% xx[jj, ]
pi_loc[jj, ] <- mult_logit(eta)
new_err <-  rgamma(DD, 3, 3)
y_out[jj, ] <- pi_loc[jj, ] * new_err
u_corr <- pmax(1 + rho * (u_corr - 1) + sqrt(1-rho^2) * (new_err - 1), 0)
y_cc[jj, ] <- pi_loc[jj, ] * u_corr
}
pi_list[[ii]] <- pi_loc
y_outer[[ii]] <- y_out
y_corr[[ii]] <- y_cc
}
# initialization parameters
beta_0 <- matrix(0, DD, PP + 1)
rho_0 <- 0
l0 <- 1e-2
starttime <- Sys.time()
# fit_outer <- update_beta_extensive_0_rho0fixed(
fit_outer <- compGeeFit(
y_outer,
x_list,
beta_0,
rho_0,
Phi = NULL,
criterion = "ref",
jack = TRUE,
decay_factor = l0,
max.iter = m.iter,
eps = ee
)
fit_corr <- compGeeFit(
y_corr,
x_list,
beta_0,
rho_0,
Phi = NULL,
criterion = "ref",
jack = TRUE,
decay_factor = l0,
max.iter = m.iter,
eps = ee
)
Sys.time() - starttime
# plot
library(ggplot2)
library(gridExtra)  # For arranging multiple plots
alpha <- 0.05
zz <- qnorm(1-alpha/2)
sdb_outer <- sqrt(diag(fit_outer$Var_jack))
sdb_outer <- matrix(sdb_outer, DD, byrow = TRUE)
sdb_corr <- sqrt(diag(fit_corr$Var_jack))
sdb_corr <- matrix(sdb_corr, DD, byrow = TRUE)
plot_list <- list()
for (dd in 1:(DD-1)) {
for (pp in 1:(PP+1)) {
df <- data.frame(
Group = factor(rep(c("I, n=5", "C, n=5"), each = NN)),
Value = c(
sapply(fit_20, function(x) x[[1]]$Beta_hat[dd, pp]),
sapply(fit_20, function(x) x[[2]]$Beta_hat[dd, pp])
)
)
df$Group <- factor(df$Group, levels = c("I, n=5", "C, n=5"))
p <- ggplot(df, aes(x = Group, y = Value)) +
geom_boxplot() +
geom_hline(yintercept = beta[dd, pp], color = "red", linetype = "dashed", linewidth = 1) +
geom_point(data = data.frame(x = 0.9, y=fit_21[[1]]$Beta_hat[dd, pp]), aes(x=x,y=y), colour="blue") +
geom_point(data = data.frame(x = 1.9, y=fit_21[[2]]$Beta_hat[dd, pp]), aes(x=x,y=y), colour="blue") +
geom_point(data = data.frame(x = 1.1, y=fit_outer$Beta_jack[dd, pp]), aes(x=x,y=y), colour="orange") +
geom_point(data = data.frame(x = 2.1, y=fit_corr$Beta_jack[dd, pp]), aes(x=x,y=y), colour="orange") +
geom_line(data = data.frame(x = c(1.1,1.1), y=c(fit_outer$Beta_jack[dd, pp] - zz * sdb_outer, fit_outer$Beta_jack[dd, pp] + zz * sdb_outer) ), aes(x=x,y=y), colour="orange") +
geom_line(data = data.frame(x = c(2.1,2.1), y=c(fit_corr$Beta_jack[dd, pp] - zz * sdb_corr, fit_corr$Beta_jack[dd, pp] + zz * sdb_corr) ), aes(x=x,y=y), colour="orange") +
labs(title = bquote(beta[.(dd) * .(pp-1)])) +
theme_minimal(base_size = 14) +
theme(
axis.text.x = element_text(angle = 45, hjust = 1),
plot.title = element_text(size = 16, face = "bold"),
axis.title = element_blank(),
panel.grid.major = element_blank(),
# panel.grid.minor = element_blank()
)
plot_list[[length(plot_list) + 1]] <- p
}
}
plot_list <- list()
for (dd in 1:(DD-1)) {
for (pp in 1:(PP+1)) {
df <- data.frame(
Group = factor(rep(c("I, n=5", "C, n=5"), each = 20)),
Value = c(
sapply(fit_20, function(x) x[[1]]$Beta_hat[dd, pp]),
sapply(fit_20, function(x) x[[2]]$Beta_hat[dd, pp])
)
)
df$Group <- factor(df$Group, levels = c("I, n=5", "C, n=5"))
p <- ggplot(df, aes(x = Group, y = Value)) +
geom_boxplot() +
geom_hline(yintercept = beta[dd, pp], color = "red", linetype = "dashed", linewidth = 1) +
geom_point(data = data.frame(x = 0.9, y=fit_21[[1]]$Beta_hat[dd, pp]), aes(x=x,y=y), colour="blue") +
geom_point(data = data.frame(x = 1.9, y=fit_21[[2]]$Beta_hat[dd, pp]), aes(x=x,y=y), colour="blue") +
geom_point(data = data.frame(x = 1.1, y=fit_outer$Beta_jack[dd, pp]), aes(x=x,y=y), colour="orange") +
geom_point(data = data.frame(x = 2.1, y=fit_corr$Beta_jack[dd, pp]), aes(x=x,y=y), colour="orange") +
geom_line(data = data.frame(x = c(1.1,1.1), y=c(fit_outer$Beta_jack[dd, pp] - zz * sdb_outer, fit_outer$Beta_jack[dd, pp] + zz * sdb_outer) ), aes(x=x,y=y), colour="orange") +
geom_line(data = data.frame(x = c(2.1,2.1), y=c(fit_corr$Beta_jack[dd, pp] - zz * sdb_corr, fit_corr$Beta_jack[dd, pp] + zz * sdb_corr) ), aes(x=x,y=y), colour="orange") +
labs(title = bquote(beta[.(dd) * .(pp-1)])) +
theme_minimal(base_size = 14) +
theme(
axis.text.x = element_text(angle = 45, hjust = 1),
plot.title = element_text(size = 16, face = "bold"),
axis.title = element_blank(),
panel.grid.major = element_blank(),
# panel.grid.minor = element_blank()
)
plot_list[[length(plot_list) + 1]] <- p
}
}
grid.arrange(grobs = plot_list, ncol = 4, nrow = 4)
?compGEE
?compGEE-pac
?compGEE-package
?`compGEE-package`
?compGeeFit
devtools::document()
devtools::build()
devtools::check()
rm(list = ls())
RNGkind("L'Ecuyer-CMRG")
library(parallel)
# source("R/compGeeFit.R")
# source("R/iterative_Liang_extensive_0_beta.R")
# source("R/softmax.R")
install.packages("../compGEE_1.0.tar.gz")
library(compGEE)
mult_logit <- function(eta)
{
pi <- exp(eta - max(eta))
return(pi / sum(pi))
}
NN <- 50
DD <- 5
TT <- 5
PP <- 3
series_lengths <- rep(TT, NN)
# small values beta
beta <- matrix(c(-0.5, 1  , -0.5,  0  ,
-0.5, 0.5,  1  , -1  ,
0.5,  0  , -1  ,  0.5,
0.5, -1  ,  0.5, -0.5,
0  , -0.5,  0  ,  1
),
DD,
byrow = TRUE)
# 0 beta
beta <- matrix(c( 0  ,  2  ,  0  , -0.5,
-0.5,  1  ,  1  , -2  ,
0  ,  0  , -1.5, -1  ,
0.5, -0.5,  0.5, -1.5,
0  ,  0  ,  0  ,  0
),
DD,
byrow = TRUE)
parallel_wrapper <- function(seed, beta, c_type, r_type, NN, TT, max.iter = 100, eps = 1e-6)
{
# source("R/compGeeFit.R")
# source("R/iterative_Liang_extensive_0_beta.R")
# source("R/softmax.R")
library(compGEE)
tryCatch({
DD <- dim(beta)[1]
PP <- dim(beta)[2] - 1
series_lengths <- rep(TT, NN)
RNGkind("L'Ecuyer-CMRG")
set.seed(seed)
# generation covariates
x_list <- vector("list", NN)
# all random
for (ii in 1:NN) {
x_list[[ii]] <- cbind(1, matrix(rnorm(PP * series_lengths[ii]), ncol = PP))
}
# generation observations
pi_list <- vector("list", NN)
y_outer <- vector("list", NN)
y_corr <- vector("list", NN)
for (ii in 1:NN) {
pi_loc <- matrix(NA, series_lengths[ii], DD)
y_out <- matrix(NA, series_lengths[ii], DD)
y_cc <- matrix(NA, series_lengths[ii], DD)
xx <- x_list[[ii]]
u_corr <-  rgamma(DD, 3, 3)
rho <- 0.8
for (jj in 1:series_lengths[ii]) {
eta <- beta %*% xx[jj, ]
pi_loc[jj, ] <- mult_logit(eta)
new_err <-  rgamma(DD, 3, 3)
y_out[jj, ] <- pi_loc[jj, ] * new_err
u_corr <- pmax(1 + rho * (u_corr - 1) + sqrt(1-rho^2) * (new_err - 1), 0)
y_cc[jj, ] <- pi_loc[jj, ] * u_corr
}
pi_list[[ii]] <- pi_loc
y_outer[[ii]] <- y_out
y_corr[[ii]] <- y_cc
}
# initialization parameters
beta_0 <- matrix(0, DD, (PP + 1))
rho_0 <- 0
l0 <- 1e-2
starttime <- Sys.time()
fit_outer <- compGeeFit(
y_outer,
x_list,
beta_0,
rho_0,
Phi = NULL,
criterion = "ref",
jack = FALSE,
decay_factor = l0,
max.iter = max.iter,
eps = eps
)
fit_corr <- compGeeFit(
y_corr,
x_list,
beta_0,
rho_0,
Phi = NULL,
criterion = "ref",
jack = FALSE,
decay_factor = l0,
max.iter = max.iter,
eps = eps
)
Sys.time() - starttime
# fit_list <- list(fit_outer, fit_inner, fit_corr)
fit_list <- list(fit_outer, fit_corr, seed)
fit_list
}, error = function(e)
{
print(e)
result <- list(error = e)
result
})
}
m.iter <- 100
ee <- 1e-6
n_seeds <- 21
set.seed(254)
seeds <- sample.int(n_seeds * 10, n_seeds)
seed_list <- vector("list", n_seeds)
for (ii in 1:n_seeds) {
seed_list[[ii]] <- seeds[ii]
}
cl <- makeCluster(min(detectCores() - 1, length(seed_list)))
clusterEvalQ(cl, { library(compGEE)
})  # you need to export packages as well
clusterExport(cl, c("parallel_wrapper", "beta", "NN", "TT", "mult_logit", "m.iter", "ee"))  # you need to export stuff as well
starttime <- Sys.time()
print(starttime)
apply_res <- parLapply(
cl,
seed_list,
parallel_wrapper,
beta = beta,
NN = NN,
TT = TT,
max.iter = m.iter,
eps = ee
)
# mclapply(seed_list, parallel_wrapper, x_list = x_list, z_list = z_long, mc.cores = 15)
Sys.time() - starttime
stopCluster(cl)
## Use the first 20 seeds for boxplots and the last for jackknife
fit_20 <- apply_res[1:20]
fit_21 <- apply_res[[21]]
rm(apply_res)
# jackknife
seed_21 <- fit_21[[3]]
set.seed(seed_21)
# generation covariates
x_list <- vector("list", NN)
# all random
for (ii in 1:NN) {
x_list[[ii]] <- cbind(1, matrix(rnorm(PP * series_lengths[ii]), ncol = PP))
}
# generation observations
pi_list <- vector("list", NN)
y_outer <- vector("list", NN)
y_corr <- vector("list", NN)
for (ii in 1:NN) {
pi_loc <- matrix(NA, series_lengths[ii], DD)
y_out <- matrix(NA, series_lengths[ii], DD)
y_cc <- matrix(NA, series_lengths[ii], DD)
xx <- x_list[[ii]]
u_corr <-  rgamma(DD, 3, 3)
rho <- 0.8
for (jj in 1:series_lengths[ii]) {
eta <- beta %*% xx[jj, ]
pi_loc[jj, ] <- mult_logit(eta)
new_err <-  rgamma(DD, 3, 3)
y_out[jj, ] <- pi_loc[jj, ] * new_err
u_corr <- pmax(1 + rho * (u_corr - 1) + sqrt(1-rho^2) * (new_err - 1), 0)
y_cc[jj, ] <- pi_loc[jj, ] * u_corr
}
pi_list[[ii]] <- pi_loc
y_outer[[ii]] <- y_out
y_corr[[ii]] <- y_cc
}
# initialization parameters
beta_0 <- matrix(0, DD, PP + 1)
rho_0 <- 0
l0 <- 1e-2
starttime <- Sys.time()
# fit_outer <- update_beta_extensive_0_rho0fixed(
fit_outer <- compGeeFit(
y_outer,
x_list,
beta_0,
rho_0,
Phi = NULL,
criterion = "ref",
jack = TRUE,
decay_factor = l0,
max.iter = m.iter,
eps = ee
)
fit_corr <- compGeeFit(
y_corr,
x_list,
beta_0,
rho_0,
Phi = NULL,
criterion = "ref",
jack = TRUE,
decay_factor = l0,
max.iter = m.iter,
eps = ee
)
Sys.time() - starttime
# plot
library(ggplot2)
library(gridExtra)  # For arranging multiple plots
alpha <- 0.05
zz <- qnorm(1-alpha/2)
sdb_outer <- sqrt(diag(fit_outer$Var_jack))
sdb_outer <- matrix(sdb_outer, DD, byrow = TRUE)
sdb_corr <- sqrt(diag(fit_corr$Var_jack))
sdb_corr <- matrix(sdb_corr, DD, byrow = TRUE)
plot_list <- list()
for (dd in 1:(DD-1)) {
for (pp in 1:(PP+1)) {
df <- data.frame(
Group = factor(rep(c("I, n=5", "C, n=5"), each = 20)),
Value = c(
sapply(fit_20, function(x) x[[1]]$Beta_hat[dd, pp]),
sapply(fit_20, function(x) x[[2]]$Beta_hat[dd, pp])
)
)
df$Group <- factor(df$Group, levels = c("I, n=5", "C, n=5"))
p <- ggplot(df, aes(x = Group, y = Value)) +
geom_boxplot() +
geom_hline(yintercept = beta[dd, pp], color = "red", linetype = "dashed", linewidth = 1) +
geom_point(data = data.frame(x = 0.9, y=fit_21[[1]]$Beta_hat[dd, pp]), aes(x=x,y=y), colour="blue") +
geom_point(data = data.frame(x = 1.9, y=fit_21[[2]]$Beta_hat[dd, pp]), aes(x=x,y=y), colour="blue") +
geom_point(data = data.frame(x = 1.1, y=fit_outer$Beta_jack[dd, pp]), aes(x=x,y=y), colour="orange") +
geom_point(data = data.frame(x = 2.1, y=fit_corr$Beta_jack[dd, pp]), aes(x=x,y=y), colour="orange") +
geom_line(data = data.frame(x = c(1.1,1.1), y=c(fit_outer$Beta_jack[dd, pp] - zz * sdb_outer, fit_outer$Beta_jack[dd, pp] + zz * sdb_outer) ), aes(x=x,y=y), colour="orange") +
geom_line(data = data.frame(x = c(2.1,2.1), y=c(fit_corr$Beta_jack[dd, pp] - zz * sdb_corr, fit_corr$Beta_jack[dd, pp] + zz * sdb_corr) ), aes(x=x,y=y), colour="orange") +
labs(title = bquote(beta[.(dd) * .(pp-1)])) +
theme_minimal(base_size = 14) +
theme(
axis.text.x = element_text(angle = 45, hjust = 1),
plot.title = element_text(size = 16, face = "bold"),
axis.title = element_blank(),
panel.grid.major = element_blank(),
# panel.grid.minor = element_blank()
)
plot_list[[length(plot_list) + 1]] <- p
}
}
grid.arrange(grobs = plot_list, ncol = 4, nrow = 4)
library(compos)
vignette
vignette(compos)
??compos
vignette("compositions_v2")
